#!/usr/bin/env bash
# cgupt - simple website blocker CLI tool (macOS + Linux)

set -euo pipefail

HOSTS_FILE="/etc/hosts"
BACKUP_DIR="$HOME/.cgupt_backups"

mkdir -p "$BACKUP_DIR"

# Common TLDs to automatically block/unblock
TLDS=(
  "com" "org" "net" "in" "io" "co" "edu" "gov" "mil" "info" "biz" "us"
  "uk" "ca" "de" "jp" "fr" "au" "ru" "ch" "it" "nl" "se" "no" "es"
  "mx" "br" "cn" "hk" "sg" "nz" "ae" "tv" "me" "tech" "site" "online"
  "app" "blog" "shop" "store" "club" "xyz" "life" "today" "space" "network"
)

# ----- FUNCTIONS -----

usage() {
  cat <<EOF
Usage:
  cgupt block <name1> [name2 ...]      # Block domains (all common TLDs)
  cgupt b <name1> [name2 ...]          # Shortcut for block
  cgupt unblock <name1> [name2 ...]    # Unblock all TLDs
  cgupt ub <name1> [name2 ...]         # Shortcut for unblock
  cgupt list                           # List blocked base names
  cgupt ls                             # Shortcut for list
  cgupt help                           # Show this help
  cgupt h                              # Shortcut for help
EOF
  exit 1
}

backup_hosts() {
  cp -p "$HOSTS_FILE" "$BACKUP_DIR/hosts_$(date +%s)"
}

normalize_domain() {
  echo "$1" | sed -E 's#^https?://##; s#/.*$##'
}

flush_dns() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    sudo dscacheutil -flushcache
    sudo killall -HUP mDNSResponder
  else
    sudo systemd-resolve --flush-caches 2>/dev/null || true
    sudo service nscd restart 2>/dev/null || true
  fi
}

expand_domains() {
  # Generate array of domain + www variants for all common TLDs
  local base="$1"
  local expanded=()
  for tld in "${TLDS[@]}"; do
    expanded+=("$base.$tld" "www.$base.$tld")
  done
  echo "${expanded[@]}"
}

block_domains() {
  [ "$#" -gt 0 ] || usage
  backup_hosts
  for base in "$@"; do
    for dn in $(expand_domains "$base"); do
      if ! grep -qiE "127\.0\.0\.1[[:space:]]+$dn" "$HOSTS_FILE"; then
        echo "127.0.0.1 $dn" | sudo tee -a "$HOSTS_FILE" >/dev/null
      fi
    done
    echo "Blocked: $base"
  done
}

unblock_domains() {
  [ "$#" -gt 0 ] || usage
  backup_hosts
  for base in "$@"; do
    for dn in $(expand_domains "$base"); do
      TMP_FILE=$(mktemp)
      sudo awk -v domain="$dn" '
        $0 !~ ("127\\.0\\.0\\.1[[:space:]]+"domain"$")
      ' "$HOSTS_FILE" | sudo tee "$TMP_FILE" >/dev/null
      sudo cp "$TMP_FILE" "$HOSTS_FILE"
      sudo rm "$TMP_FILE"
    done
    echo "Unblocked: $base"
  done
  flush_dns
  echo "DNS cache flushed."
}

list_domains() {
  # Extract all base names ignoring www. and TLDs
  grep -E "^127\.0\.0\.1" "$HOSTS_FILE" | awk '{print $2}' | \
    sed -E 's/^www\.//' | \
    sed -E 's/\.(com|org|net|in|io|co|edu|gov|mil|info|biz|us|uk|ca|de|jp|fr|au|ru|ch|it|nl|se|no|es|mx|br|cn|hk|sg|nz|ae|tv|me|tech|site|online|app|blog|shop|store|club|xyz|life|today|space|network)$//' | \
    sort | uniq
}

# ----- MAIN -----

if [ "$#" -eq 0 ]; then
  usage
fi

COMMAND="$1"
shift || true

case "$COMMAND" in
  block|b)
    block_domains "$@"
    ;;
  unblock|ub)
    unblock_domains "$@"
    ;;
  list|ls)
    list_domains
    ;;
  help|h)
    usage
    ;;
  *)
    usage
    ;;
esac
